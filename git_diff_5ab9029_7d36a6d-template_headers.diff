diff --git a/lua/plugins/42-header.lua b/lua/plugins/42-header.lua
new file mode 100644
index 0000000..326ce72
--- /dev/null
+++ b/lua/plugins/42-header.lua
@@ -0,0 +1,29 @@
+return {
+  {
+    "Diogo-ss/42-header.nvim",
+    cmd = { "Stdheader" },
+    keys = { "<F1>" },
+    opts = {
+      default_map = true, -- Default mapping <F1> in normal mode.
+      auto_update = true, -- Update header when saving.
+      user = "bcwise", -- Your user.
+      mail = "bart.c.wise@gmail.com", -- Your mail.
+      -- add other options.
+      length = 85,
+    },
+    ---Git config.
+    git = {
+      ---Enable Git support.
+      enabled = true,
+      ---PATH to the Git binary.
+      bin = "git",
+      ---Use global user.name, otherwise use local user.name.
+      user_global = false,
+      ---Use global user.email, otherwise use local user.email.
+      email_global = false,
+    },
+    config = function(_, opts)
+      require("42header").setup(opts)
+    end,
+  },
+}
diff --git a/lua/plugins/lsp/mason-lspconfig.lua b/lua/plugins/lsp/mason-lspconfig.lua
index ab4ba8b..9770634 100644
--- a/lua/plugins/lsp/mason-lspconfig.lua
+++ b/lua/plugins/lsp/mason-lspconfig.lua
@@ -21,12 +21,12 @@ return {
       end,
 
       -- ["tailwindcss"] = require("plugins.lsp.setting.tailwindcss"),
+      ["asm_ls"] = require("plugins.lsp.setting.asm_ls"),
       ["clangd"] = require("plugins.lsp.setting.clangd"),
       ["eslint"] = require("plugins.lsp.setting.eslint"),
       ["html"] = require("plugins.lsp.setting.html"),
       ["jsonls"] = require("plugins.lsp.setting.jsonls"),
       ["lua_ls"] = require("plugins.lsp.setting.lua_ls"),
-      ["asm_lsp"] = require("plugins.lsp.setting.asm_lsp"),
       ["pyright"] = require("plugins.lsp.setting.pyright"),
       -- ["rust_analyzer"] = require("plugins.lsp.setting.rust_analyzer"),
       -- ["tsserver"] = require("plugins.lsp.setting.tsserver"),
diff --git a/lua/plugins/spooky.lua b/lua/plugins/spooky.lua
new file mode 100644
index 0000000..bf6c92a
--- /dev/null
+++ b/lua/plugins/spooky.lua
@@ -0,0 +1,7 @@
+return {
+  "Futarimiti/spooky.nvim",
+
+  -- if you'd like to use Telescope picker for templates
+  dependencies = { "nvim-telescope/telescope.nvim" },
+  opts = { ... },
+}
diff --git a/skeletons/general/bash.skl b/skeletons/general/bash.skl
new file mode 100644
index 0000000..cb8a04a
--- /dev/null
+++ b/skeletons/general/bash.skl
@@ -0,0 +1,12 @@
+return function (buf)
+    local name = vim.api.nvim_buf_get_name(buf)
+    local basename = vim.fs.basename(name)
+    return { class_name = basename:gsub('%.java$', ''):gsub('^%l', string.upper)
+           , _cursor = { 3, 0 }
+           }
+end
+---
+public class ${class_name}
+{
+	
+}
diff --git a/skeletons/general/haskell/default.skl b/skeletons/general/haskell/default.skl
new file mode 100644
index 0000000..5bd282c
--- /dev/null
+++ b/skeletons/general/haskell/default.skl
@@ -0,0 +1,10 @@
+return function (buf)
+    local name = vim.api.nvim_buf_get_name(buf)
+    local basename = vim.fs.basename(name)
+    return { module_name = basename:gsub('%.hs$', ''):gsub('^%l', string.upper)
+           , _cursor = { 2, 0 }
+           }
+end
+---
+module ${module_name} where
+
diff --git a/skeletons/general/haskell/main.skl b/skeletons/general/haskell/main.skl
new file mode 100644
index 0000000..a60042e
--- /dev/null
+++ b/skeletons/general/haskell/main.skl
@@ -0,0 +1,12 @@
+return function (buf)
+    local name = vim.api.nvim_buf_get_name(buf)
+    local basename = vim.fs.basename(name)
+    return { module_name = basename:gsub('%.hs$', ''):gsub('^%l', string.upper)
+           , _cursor = { 4, 6 }
+           }
+end
+---
+module ${module_name} where
+
+main :: IO ()
+main = 
diff --git a/skeletons/general/haskell/yesod.skl b/skeletons/general/haskell/yesod.skl
new file mode 100644
index 0000000..da0d219
--- /dev/null
+++ b/skeletons/general/haskell/yesod.skl
@@ -0,0 +1,35 @@
+return function (buf)
+    local name = vim.api.nvim_buf_get_name(buf)
+    local basename = vim.fs.basename(name)
+    local module_name = basename:gsub('%.hs$', ''):gsub('^%l', string.upper)
+    return { module_name = module_name
+           , yesod_data = module_name
+           }
+end
+---
+{-# LANGUAGE DataKinds         #-}
+{-# LANGUAGE DeriveAnyClass    #-}
+{-# LANGUAGE OverloadedStrings #-}
+{-# LANGUAGE QuasiQuotes       #-}
+{-# LANGUAGE RecordWildCards   #-}
+{-# LANGUAGE TemplateHaskell   #-}
+{-# LANGUAGE TypeFamilies      #-}
+
+module ${module_name} where
+
+import           Yesod
+
+mkYesod "${yesod_data}" [parseRoutes|
+  / HomeR GET
+  |]
+
+data ${yesod_data} = ${yesod_data}
+  deriving (Yesod)
+
+getHomeR :: Handler Html
+getHomeR = defaultLayout [whamlet|
+  Hello World!
+  |]
+
+run :: IO ()
+run = warp 3000 ${yesod_data}
diff --git a/skeletons/general/java.skl b/skeletons/general/java.skl
new file mode 100644
index 0000000..cb8a04a
--- /dev/null
+++ b/skeletons/general/java.skl
@@ -0,0 +1,12 @@
+return function (buf)
+    local name = vim.api.nvim_buf_get_name(buf)
+    local basename = vim.fs.basename(name)
+    return { class_name = basename:gsub('%.java$', ''):gsub('^%l', string.upper)
+           , _cursor = { 3, 0 }
+           }
+end
+---
+public class ${class_name}
+{
+	
+}
diff --git a/skeletons/general/lua.skl b/skeletons/general/lua.skl
new file mode 100644
index 0000000..01d6680
--- /dev/null
+++ b/skeletons/general/lua.skl
@@ -0,0 +1,9 @@
+return function (_)
+    return { _cursor = { 3, 0 } }
+end
+---
+local M = {}
+
+
+
+return M
diff --git a/skeletons/general/python.skl b/skeletons/general/python.skl
new file mode 100644
index 0000000..da84e6a
--- /dev/null
+++ b/skeletons/general/python.skl
@@ -0,0 +1 @@
+# pyright: strict
diff --git a/skeletons/specific/Main.hs.skl b/skeletons/specific/Main.hs.skl
new file mode 100644
index 0000000..31f8824
--- /dev/null
+++ b/skeletons/specific/Main.hs.skl
@@ -0,0 +1,12 @@
+return function (buf)
+  local name = vim.api.nvim_buf_get_name(buf)
+  local basename = vim.fs.basename(name)
+  return { module_name = basename:gsub('%.hs$', ''):gsub('^%l', string.upper)
+         , _cursor = { 4, 6 }
+         }
+end
+---
+module ${module_name} where
+
+main :: IO ()
+main = 
diff --git a/skeletons/specific/Main.java.skl b/skeletons/specific/Main.java.skl
new file mode 100644
index 0000000..d31ae9a
--- /dev/null
+++ b/skeletons/specific/Main.java.skl
@@ -0,0 +1,15 @@
+return function (buf)
+    local name = vim.api.nvim_buf_get_name(buf)
+    local basename = vim.fs.basename(name)
+    return { class_name = basename:gsub('%.java$', ''):gsub('^%l', string.upper)
+           , _cursor = { 5, 2 }
+           }
+end
+---
+public class ${class_name}
+{
+	public static void main(String[] args)
+	{
+		
+	}
+}
diff --git a/skeletons/specific/Test.hs.skl b/skeletons/specific/Test.hs.skl
new file mode 120000
index 0000000..3b6cd19
--- /dev/null
+++ b/skeletons/specific/Test.hs.skl
@@ -0,0 +1 @@
+Main.hs.skl
\ No newline at end of file
diff --git a/skeletons/specific/Test.java.skl b/skeletons/specific/Test.java.skl
new file mode 120000
index 0000000..55d0764
--- /dev/null
+++ b/skeletons/specific/Test.java.skl
@@ -0,0 +1 @@
+Main.java.skl
\ No newline at end of file
diff --git a/skeletons/specific/main.py.skl b/skeletons/specific/main.py.skl
new file mode 100644
index 0000000..889dddd
--- /dev/null
+++ b/skeletons/specific/main.py.skl
@@ -0,0 +1,11 @@
+return function (_)
+    return { _cursor = { 4, 0 } }
+end
+---
+# pyright: strict
+
+def main():
+	
+
+if __name__ == '__main__':
+    main()
diff --git a/skeletons/specific/test.py.skl b/skeletons/specific/test.py.skl
new file mode 120000
index 0000000..6e47db4
--- /dev/null
+++ b/skeletons/specific/test.py.skl
@@ -0,0 +1 @@
+main.py.skl
\ No newline at end of file
